LOAD 10
STORE R0
LOAD 5
STORE R1

CALL .print_caret

main:
    CALL .get_keyboard
    CMP 0
    JZ .main ; no keystrokes to process
    
    CMP 8 ; cmp with backspace
    JZ .backspace
    
    CMP 32 ; cmp with space
    JZ .caret_right ; just move along if space is encountered

    SUB 97 ; ascii value of 'a'
    STORE L
    LOAD 0
    STORE H
    MULW 15 ; each letter is 15 bytes, they're stored next to each other
    LOAD text_a[HL]
    PUSH R0 ; y
    PUSH R1 ; x
    CALL .print_letter
    
    caret_right:        
        LOAD R1
        CMP 122
        JZ .caret_newline
        
        ADD 3 ; move caret 3 to the right
        STORE R1
        CALL .print_caret
        
        JMP .main
        
    caret_newline:
        LOAD 5
        STORE R1
        LOAD R0
        ADD 6
        STORE R0
        CALL .print_caret
        
        JMP .main
    
    backspace:
        ADD text_empty[0]
        PUSH R0
        PUSH R1
        CALL .print_letter
        
        LOAD R1
        CMP 5
        JZ .backspace_line
        
        SUB 3
        STORE R1
        
        print_backspace:
            ADD text_empty[0]
            PUSH R0
            PUSH R1
            CALL .print_letter
            JMP .main        
        
    backspace_line:
        LOAD R0
        CMP 10
        JZ .main
        
        SUB 6
        STORE R0
        LOAD 122
        STORE R1
        JMP .print_backspace        

; get keyboard input from circular buffer. Result in ACC
get_keyboard:
    LOAD read_idx[0]
    CMP write_idx[0]
    JZ .buf_empty
    STORE L ; read_idx
    LOAD 0
    STORE H
    LOAD ringbuf[HL]
    PUSH ACC
    LOAD read_idx[0]
    INC ACC
    AND 0x0f ; mod 16
    STORE read_idx[0]
    POP ACC
    RET    
    
    buf_empty:
        LOAD 0
        RET
        
print_caret:
    ADD text_caret[0]
    PUSH R0
    PUSH R1
    CALL .print_letter
    RET
    
print_space:
    ADD text_empty[0]
    PUSH R0
    PUSH R1
    CALL .print_letter
    RET

; print 6x5 letter, memory location in HL, x, y on stack
print_letter:
    ENTER 0

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    DEC {BP + 3}
    DEC {BP + 3}
    INC {BP + 4}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    DEC {BP + 3}
    DEC {BP + 3}
    INC {BP + 4}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    DEC {BP + 3}
    DEC {BP + 3}
    INC {BP + 4}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    DEC {BP + 3}
    DEC {BP + 3}
    INC {BP + 4}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    INC {BP + 3}

    LOAD (HL) ; first sprite byte
    PUSH H
    PUSH L
    PUSH ACC
    LOAD {BP + 4} ; y
    STORE L
    LOAD 0
    STORE H
    MULW 128
    LOAD {BP + 3} ; x
    ADDW ACC
    ADDW 0x9fff ; video addr now in HL
    POP ACC
    STORE (HL)
    POP L
    POP H
    INC HL
    
    LEAVE
    RET 2 ; pop 2 stack arguments from the stack as cleanup
    
; text_0:
;     0x03 0x33 0x00
;     0x30 0x00 0x30
;     0x30 0x30 0x30
;     0x30 0x00 0x30
;     0x03 0x33 0x00
; 
; text_1:
;     0x03 0x30 0x00
;     0x30 0x30 0x00
;     0x00 0x30 0x00
;     0x00 0x30 0x00
;     0x33 0x33 0x30
; 
; text_2:
;     0x03 0x30 0x00
;     0x30 0x03 0x00
;     0x00 0x30 0x00
;     0x03 0x00 0x00
;     0x33 0x33 0x00
; 
; text_3:
;     0x33 0x33 0x00
;     0x00 0x03 0x00
;     0x00 0x33 0x00
;     0x00 0x03 0x00
;     0x33 0x33 0x00
; 
; text_4:
;     0x30 0x03 0x00
;     0x30 0x03 0x00
;     0x03 0x33 0x00
;     0x00 0x03 0x00
;     0x00 0x03 0x00
; 
; text_5:
;     0x03 0x33 0x00
;     0x30 0x00 0x00
;     0x33 0x33 0x00
;     0x00 0x03 0x00
;     0x33 0x33 0x00
; 
; text_6:
;     0x03 0x33 0x00
;     0x30 0x00 0x00
;     0x33 0x33 0x00
;     0x30 0x03 0x00
;     0x33 0x33 0x00
; 
; text_7:
;     0x33 0x33 0x00
;     0x00 0x03 0x00
;     0x00 0x30 0x00
;     0x03 0x00 0x00
;     0x30 0x00 0x00
; 
; text_8:
;     0x03 0x30 0x00
;     0x30 0x03 0x00
;     0x03 0x30 0x00
;     0x30 0x03 0x00
;     0x03 0x30 0x00
; 
; text_9:
;     0x33 0x30 0x00
;     0x30 0x03 0x00
;     0x33 0x33 0x00
;     0x00 0x03 0x00
;     0x33 0x30 0x00
; 
text_a:
    0x03 0x33 0x00
    0x30 0x00 0x30
    0x33 0x33 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30

text_b:
    0x33 0x33 0x00
    0x30 0x00 0x30
    0x33 0x33 0x00
    0x30 0x00 0x30
    0x33 0x33 0x00

text_c:
    0x03 0x33 0x30
    0x30 0x00 0x00
    0x30 0x00 0x00
    0x30 0x00 0x00
    0x03 0x33 0x30

text_d:
    0x33 0x33 0x00
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x33 0x33 0x00

text_e:
    0x33 0x33 0x30
    0x30 0x00 0x00
    0x33 0x33 0x00
    0x30 0x00 0x00
    0x33 0x33 0x30

text_f:
    0x33 0x33 0x30
    0x30 0x00 0x00
    0x33 0x33 0x00
    0x30 0x00 0x00
    0x30 0x00 0x00

text_g:
    0x03 0x33 0x30
    0x30 0x00 0x00
    0x30 0x03 0x30
    0x30 0x00 0x30
    0x03 0x33 0x30

text_h:
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x33 0x33 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30

text_i:
    0x33 0x33 0x30
    0x00 0x30 0x00
    0x00 0x30 0x00
    0x00 0x30 0x00
    0x33 0x33 0x30

text_j:
    0x33 0x33 0x30
    0x00 0x03 0x00
    0x00 0x03 0x00
    0x30 0x03 0x00
    0x03 0x33 0x00

text_k:
    0x30 0x03 0x00
    0x30 0x30 0x00
    0x33 0x00 0x00
    0x30 0x30 0x00
    0x30 0x03 0x00

text_l:
    0x30 0x00 0x00
    0x30 0x00 0x00
    0x30 0x00 0x00
    0x30 0x00 0x00
    0x33 0x33 0x00

text_m:
    0x30 0x00 0x30
    0x33 0x03 0x30
    0x30 0x30 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30

text_n:
    0x30 0x00 0x30
    0x33 0x00 0x30
    0x30 0x30 0x30
    0x30 0x03 0x30
    0x30 0x00 0x30

text_o:
    0x03 0x33 0x00
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x03 0x33 0x00

text_p:
    0x33 0x30 0x00
    0x30 0x03 0x00
    0x33 0x30 0x00
    0x30 0x00 0x00
    0x30 0x00 0x00

text_q:
    0x03 0x33 0x00
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x30 0x03 0x30
    0x03 0x33 0x30

text_r:
    0x33 0x33 0x00
    0x30 0x00 0x30
    0x33 0x33 0x00
    0x30 0x03 0x00
    0x30 0x00 0x30

text_s:
    0x03 0x33 0x30
    0x30 0x00 0x00
    0x03 0x33 0x00
    0x00 0x00 0x30
    0x33 0x33 0x00

text_t:
    0x33 0x33 0x30
    0x00 0x30 0x00
    0x00 0x30 0x00
    0x00 0x30 0x00
    0x00 0x30 0x00

text_u:
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x03 0x33 0x30

text_v:
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x03 0x03 0x00
    0x03 0x03 0x00
    0x00 0x30 0x00

text_w:
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x30 0x00 0x30
    0x30 0x30 0x30
    0x03 0x03 0x00

text_x:
    0x30 0x00 0x30
    0x03 0x03 0x00
    0x00 0x30 0x00
    0x03 0x03 0x00
    0x30 0x00 0x30

text_y:
    0x30 0x00 0x30
    0x03 0x03 0x00
    0x00 0x30 0x00
    0x00 0x30 0x00
    0x00 0x30 0x00

text_z:
    0x33 0x33 0x30
    0x00 0x03 0x00
    0x00 0x30 0x00
    0x03 0x00 0x00
    0x33 0x33 0x30
    
text_empty:
    0x00 0x00 0x00
text_caret:
    0x00 0x00 0x00
    0x00 0x00 0x00
    0x00 0x00 0x00
    0x00 0x00 0x00
    
    0x03 0x33 0x30

; text_a:
;     0x03 0x33 0x00
;     0x30 0x00 0x30
;     0x33 0x33 0x30
;     0x30 0x00 0x30
;     0x30 0x00 0x30
;     
; text_b:
;     0x33 0x33 0x00
;     0x30 0x00 0x30
;     0x33 0x33 0x00
;     0x30 0x00 0x30
;     0x33 0x33 0x00
;     
; text_c:
;     0x03 0x33 0x30
;     0x30 0x00 0x00
;     0x30 0x00 0x00
;     0x30 0x00 0x00
;     0x03 0x33 0x30
;     
; text_d:
;     0x33 0x33 0x00
;     0x30 0x00 0x30
;     0x30 0x00 0x30
;     0x30 0x00 0x30
;     0x33 0x33 0x00
;     
; text_e:
;     0x33 0x33 0x30
;     0x30 0x00 0x00
;     0x33 0x33 0x00
;     0x30 0x00 0x00
;     0x33 0x33 0x30
; 
; text_o:
;     0x03 0x33 0x00
;     0x30 0x00 0x30
;     0x30 0x00 0x30
;     0x30 0x00 0x30
;     0x03 0x33 0x00
; 
; text_x:
;     0x30 0x00 0x30
;     0x03 0x03 0x00
;     0x00 0x30 0x00
;     0x03 0x03 0x00
;     0x30 0x00 0x30
; 
; text_y:
;     0x30 0x00 0x30
;     0x03 0x03 0x00
;     0x00 0x30 0x00
;     0x00 0x30 0x00
;     0x00 0x30 0x00
    
.write_idx = 0x9fed
.read_idx = 0x9fee
.ringbuf = 0x9fef
.video = 0x9fff